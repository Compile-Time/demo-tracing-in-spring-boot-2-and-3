plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.0'
    id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

configurations {
    adoc
}

dependencies {
    // Bring common interfaces into project
    implementation project(':common-interface')

    // Spring dependencies
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.flywaydb:flyway-core'

    runtimeOnly 'org.postgresql:postgresql'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // Tracing dependencies after Spring Boot 3
    implementation 'io.micrometer:micrometer-tracing-bridge-brave'
    implementation 'io.zipkin.reporter2:zipkin-reporter-brave'

    // Required for /actuator/prometheus endpoint
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // Logback appender for Grafana Loki
    implementation "com.github.loki4j:loki-logback-appender:$loki4jVersion"

    // Documentation generation for ObservationDocumentation classes
    adoc "io.micrometer:micrometer-docs-generator:$micrometerDocsVersion"

    // Dependency for testing observations
    testImplementation 'io.micrometer:micrometer-observation-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

task generateObservabilityDocs(type: JavaExec, group: 'documentation') {
    mainClass = "io.micrometer.docs.DocsGeneratorCommand"
    classpath configurations.adoc
    // input folder, inclusion pattern, output folder
    args project.rootDir.getAbsolutePath(), ".*", project.rootProject.buildDir.getAbsolutePath()
}